library(gdpc)
install.packages("gdpc")
library(gdpc)
T <- 200 #length of series
m <- 200 #number of series
set.seed(1234)
f <- rnorm(T + 1)
x <- matrix(0, T, m)
u <- matrix(rnorm(T * m), T, m)
for (i in 1:m) {
x[, i] <- 10 * sin(2 * pi * (i/m)) * f[1:T] + 10 * cos(2 * pi * (i/m)) * f[2:(T + 1)] + u[, i]
}
#Choose number of lags using the LOO criterion.
#k_max=3 to keep computation time low
autofit <- auto.gdpc(x, k_max = 3)
autofit
fit_val <- fitted(autofit, 1) #Get fitted values
resid <- x - fit_val #Residuals
plot.gdpcs(autofit, which_comp = 1) #Plot component
attributes(autofit)
install.packages("VARsignR")
remove.packages("crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
?crossplot
library(crossplotr)
?crossplot
data(mtcars)
crossplot(mtcars, x.var = "mpg", y.var = "hp", size.var = "wt",
shapes.var = "cyl")
?crossplot_print_stats
library("gtrendsR")
remove.packages("gtrendsR")
install.packages("gtrendsR")
remove.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
plot(res)
gconnect(usr="chandler.lutz12345",psw = "Re!ate925")
res <- gtrends(c("nhl", "nba"), geo = c("CA", "US"))
res <- gtrends(c("nhl", "nba"), geo = c("CA"))
res <- gtrends(c("nhl", "nba"), geo = c("US"))
res <- gtrends(c(nba"), geo = c("US"))
res <- gtrends(c("nba"), geo = c("US"))
res <- gtrends(c("nba"), geo = c("USA"))
data("countries")
countries
View(countries)
View(countries)
gtrends(c("NHL", "NBA", "MLB", "MLS"))
gconnect(usr="chandler.lutz12345",psw = "Re!ate925")
gtrends(c("nhl", "nba", "nfl"), geo = "US")
gconnect(usr="chandler.lutz12345@gmail.com",psw = "Re!ate925")
gtrends(c("nhl", "nba", "nfl"), geo = "US")
gtrends(c("NHL", "NBA", "MLB", "MLS"))
remove.packages("curl")
devtools::install_github("PMassicotte/gtrendsR")
install.packages("curl")
library(devtools)
install_github("PMassicotte/gtrendsR")
remove.packages("crossplotr")
install.packages("crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
library(crossplotr)
?crossplot_outliers
?crossplot_outliers
remove.packages("crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
library(crossplotr)
?crossplot_outliers
install.packages("fuzzyjoin")
remove.packages("crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
library(crossplotr)
?crossplot_outliers
?crossplot_outliers
?crossplot_outlier
?crossplot_outliers
library(crossplotr)
?crossplot_outliers
data(mtcars)
##Get the outliers for hp and and mpg from mtcars
crossplot_outliers(mtcars,vars = c("hp","mpg"), percentile.outliers = 0.05)
crossplot_outliers(mtcars,vars = c("hp","mpg"), num.outliers = 2)
##Outliers from a ggplot
p <- ggplot(mtcars, aes(x = hp, y = mpg)) + geom_point(aes(size = wt))
crossplot_outliers(p, vars = c("hp", "mpg"), num.outliers = 2)
crossplot_outliers(p, vars = c("mpg", "hp", "wt"), percentile.outliers = .05)
## -- Full Example using crossplot() and labels -- ##
mtcars$name <- rownames(mtcars)
mtcars.outliers <- crossplot_outliers(mtcars, vars = c("mpg", "hp"), num.outliers = 2)
p <- crossplot(mtcars, x.var = "mpg", y.var = "hp", size.var = "wt",
shapes.var = "cyl", label.var = "name", points.alpha = 0.7) +
geom_text(data = mtcars.outliers)
print(p)
remove.packages("readxl")
install.packages("readxl")
?readxl
library(readxl)
?read_excel
install.packages("dummies")
library(dummies)
letters <- c( "a", "a", "b", "c", "d", "e", "f", "g", "h", "b", "b" )
dummy( as.character(letters) )
dummy( letters[1:6] )
remove.packages("crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
remove.packages("ggplot2")
install.packages("ggplot2")
install_github("ChandlerLutz/crossplotr")
install_github("ChandlerLutz/crossplotr")
library(devtools)
install_github("ChandlerLutz/crossplotr")
remove.packages("ggplot2")
install_github("ChandlerLutz/crossplotr")
install.packages("rlang",dependencies = TRUE)
install_github("ChandlerLutz/crossplotr")
library(crossplotr)
?crossplot
data(mtcars)
crossplot(mtcars, x.var = "mpg", y.var = "hp", size.var = "wt",
shapes.var = "cyl")
install.packages("viridisLite")
remove.packages("gtrendsR")
library(devtools)
install_github("PMassicotte/gtrendsR")
install.packages("curl")
install.packages("curl")
install_github("PMassicotte/gtrendsR")
library(devtools)
install_github("PMassicotte/gtrendsR")
?gtrends
library(gtrendsR)
?gtrends
head(gtrends(c("NHL", "NFL"), time = "now 7-d"))
install.packages("taskscheduleR")
remove.packages("quantmod")
install.packages("quantmod")
library(quantmod)
getSymbols("AAPL",src="yahoo")
AAPl
AAPL
sessionInfo()
remove.packages("multiwayvcov")
install.packages("multiwayvcvo")
install.packages("multiwayvcov")
install.packages("stringdist")
library(stringdist)
?stringdistmatrix
d <- stringdistmatrix(c('foo','bar','boo','baz'))
d
stringdist("ca","abc")
stringdist("abc","abc")
dim(d)
d
class(d)
d[,1]
attributes(d)
install.packages("RSAGA")
library(RSAGA)
rsaga.env()
library(raster)
install.packages("raster")
library(raster)
?getData
elevation <- getData('alt', country='CHE')
head(elevation)
x <- terrain(elevation, opt=c('slope', 'aspect'), unit='degrees')
plot(x)
attributes(x)
elevation$data
elevation@data
elevation@data@values
sumamry(elevation)
summary(elevation)
library(raster)
elevation <- getData('alt', country='CHE')
x <- terrain(elevation, opt=c('slope', 'aspect'), unit='degrees')
x
x$slope
x$slope
head(x$slope)
x$slope$slope
x$slope$slope$values
x@data
x$slope@data
x$slope@data@values
library(magrittr)
x$slope@data@values %>% .[is.na(.)]
x$slope@data@values %>% .[!is.na(.)]
install.packages("rhdf5")
install.packages("rhdf5")
library(sf)
install.packages("sf")
install.packages("rasterVis")
install.packages("pacman")
remove.packages("tidyZillow")
library(devtools)
install_github("ChandlerLutz/tidyZillow")
library(tidyZillow)
zillow.state <-   fread("http://files.zillowstatic.com/research/public/State/State_Zhvi_AllHomes.csv")
zillow.state <- tidyZillow(zillow.state, series.name = "ZillowState")
head(zillow.state)
install.packages("snow")
remove.packages("sf")
remove.packages("Rcpp")
library(devtools)
install_github("edzer/sfr")
install.packages("Rcpp")
install_github("edzer/sfr")
install.packages("sf")
install.packages("Rcpp")
install.packages("sf")
library(sf)
POINT(c(3,2))
library(SF)
install.packages("R.utils")()
install.packages("ggjoy")
setwd("C:/Dropbox/PublicShinyApps")
library(shiny)
library(rsconnect)
runApp("MDRI-App")
install.packages("RcppEigen")
runApp("MDRI-App")
